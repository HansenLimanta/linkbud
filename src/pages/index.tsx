import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import {
  DragDropContext,
  Draggable,
  Droppable,
  DropResult,
} from "@hello-pangea/dnd";
import { api } from "~/utils/api";
import Linkbud from "./linkbud";
import { useEffect, useState } from "react";

type Task = {
  id: string;
  content: string;
};

type Column = {
  id: string;
  title: string;
  taskIds: string[];
};

type TaskList = {
  tasks: Task[];
  columns: Column[];
  columnOrder: string[];
};

export default function Home() {
  const [taskList, setTaskList] = useState<TaskList>({
    columnOrder: [],
    columns: [],
    tasks: [],
  } as TaskList);
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });
  useEffect(() => {
    const initialTaskList: TaskList = {
      tasks: [
        { id: "task-1", content: "Take out the garbage" },
        { id: "task-2", content: "Watch my favorite show" },
        { id: "task-3", content: "Charge my phone" },
        { id: "task-4", content: "Cook dinner" },
      ] as Task[],
      columns: [
        {
          id: "column-1",
          title: "To do",
          taskIds: ["task-1", "task-2", "task-3", "task-4"],
        },
        {
          id: "column-2",
          title: "In progress",
          taskIds: [],
        },
        {
          id: "column-3",
          title: "Done",
          taskIds: [],
        },
      ] as Column[],
      columnOrder: ["column-1", "column-2", "column-3"],
    };
    setTaskList({ ...initialTaskList });
  }, []);
  const onDragEnd = (result: DropResult) => {
    const { destination, source, draggableId } = result;
    if (!destination) return;
    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }
    const newColumns = [...taskList.columns];
    const column = newColumns.find(
      (column) => column.id === source.droppableId,
    );
    column?.taskIds.splice(source.index, 1);
    column?.taskIds.splice(destination.index, 0, draggableId);
    setTaskList({ ...taskList, columns: newColumns });
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-screen bg-stone-100 ">
        <DragDropContext onDragEnd={onDragEnd}>
          <div className="flex h-screen flex-auto flex-col items-center justify-start gap-12 px-4 py-16">
            <button className="rounded-full bg-amber-200 px-4 py-2">
              + Add Link
            </button>
            {taskList.columnOrder.map((columnId) => {
              const column = taskList.columns.find(
                (column) => column.id === columnId,
              );
              const tasks = column?.taskIds.map((taskId) => {
                return taskList.tasks.find((task) => task.id === taskId);
              });
              return (
                <div
                  key={column?.id}
                  className="m-2 rounded-md border-2 border-black p-3"
                >
                  <h3>{column?.title}</h3>
                  <Droppable droppableId={column ? column?.id : "1"}>
                    {(provided) => (
                      <div
                        className="border border-gray-500 p-4"
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                      >
                        {tasks?.map((task, index) => (
                          <Draggable
                            key={task?.id}
                            draggableId={task?.id!}
                            index={index}
                            isDragDisabled={false}
                          >
                            {(provided) => (
                              <div
                                className="p-1"
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                              >
                                <p className="m-2 rounded-md border-2 border-gray-900 p-3">
                                  {task?.content}
                                </p>
                              </div>
                            )}
                          </Draggable>
                        ))}
                        {provided.placeholder}
                      </div>
                    )}
                  </Droppable>
                </div>
              );
            })}
          </div>
          <div className="right-0 top-0 z-10 h-screen w-[570px] border-l px-20 py-10">
            <Linkbud />
          </div>
        </DragDropContext>
      </main>
      {/* <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <Link
              href="/linkbud"
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
            >
              <div>Go to Linkbud</div>
            </Link>
            <AuthShowcase />
          </div>
        </div>
      </main> */}
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
